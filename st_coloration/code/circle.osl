float isInCircle(float x, float y, float x_pos, float y_pos, float R) {
	vector uv = vector(x,y,0);
	uv[0] = uv[0] - x_pos;
	uv[1] = uv[1] - y_pos;
	float circle = length(uv);
	if(circle <= R)
		return 1.0;
	else
		return 0.0;
	}

shader circle
[[
int rfm_nodeid = 13,
string rfm_classification = "rendernode/RenderMan/pattern",
string help = "Node to create parameterized circle shape"
]]
(
float s = 0 	[[
		int lockgeom = 0,
		string widget = "null",
		]],
float t = 0 	[[
		int lockgeom = 0,
		string widget = "null",
		]],
float x_pos=0.75 
		[[
		string label = "X_Position",
		]],
float y_pos= 0.75
		[[
		string label = "Y_Position",
		]],
float rad=0.1
		[[
		string label = "Radius",
		]],
color col = color(1,1,0)
		[[
		string label = "Circle Color",
		]],
color col2 = color(0,0,1)
		[[
		string label = "Background Color",
		]],
output color resultRGB = 0
)

{
if(isInCircle(s, t, x_pos, y_pos, rad))
	resultRGB=col;
else
	resultRGB=col2;
//circle = clamp(circle,0.0,1.0);
//resultRGB = mix(col,col2,circle);
//resultRGB = color(1,0,0);
}
